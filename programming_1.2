#include<iostream>
#include<fstream>
#include<string>

using namespace std;

const int V = 501;
const int E = 2500;
const int INF = INT_MAX / 2;

/*function to create the adjacency matrix */

void creategraph(int g[E][3], int graph[V][V], int v, int e){
	int i = 0, j = 0;
	
	for (i = 0; i <=v;i++)
	for (j = 0; j <=v; j++)
		graph[i][j] = INF;
	
	for (i = 0; i < e; i++){
		graph[g[i][0]][g[i][1]] = g[i][2]; 
		graph[g[i][1]][g[i][0]] = g[i][2];
	}

}

long long prims_algorithm(int graph[V][V],int v,int e){
	int visited[V];
	int i = 0,j=0;
	int x=0, y=0;
	long long sum = 0;
	int nv = 1;
	int min = INF;

	for (i = 0; i <= v; i++)
		visited[i] = 0;
	

	visited[1] = 1;
	while (nv < v){
		for (i = 1; i <= v; i++){
			if (visited[i] == 1){
				for (j = 1; j <= v; j++){
					if (visited[j] == 0){
						if (graph[i][j] < min){
							min = graph[i][j];
							x = i;
							y = j;
						}

					}
				}
			}
		}
		sum += graph[x][y];
		nv = nv + 1;
	}

	return sum;
}


void main(){
	
	int g[E][3];							//to store vertices and their corresponding weights
	int graph[V][V];
	int a, b, c;
	int v,e,i=0;
	long long p;
	std::ifstream f("edges.txt");
	
	f >> v;		//no of veritices in the graph
	f >> e;

	while (f>>g[i][0]>>g[i][1]>>g[i][2]){
		i++;
	}
	
	creategraph(g, graph,v,e);
	p = prims_algorithm(graph,v,e);
	std::cout << p;
	getchar();


}
